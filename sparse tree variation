
//number of subarrays such that the difference between
//maximum and minimum val is less than equal to k


int t[N][20],a[N],mx[N][20],mn[N][20],k,n;
void build(int n){
    for(int i=1;i<=n;i++)mx[i][0]=mn[i][0]=a[i];

    for(int k=1;k<18;k++){
      for(int i=1;i+(1<<k)-1<=n;i++){
       // t[i][k]=min(t[i][k-1],t[i+(1<<(k-1))][k-1]);
        mx[i][k]=max(mx[i][k-1],mx[i+(1<<(k-1))][k-1]);
        mn[i][k]=min(mn[i][k-1],mn[i+(1<<(k-1))][k-1]);
      }
    }
    
}

int query(int l,int r){
    int k=31- __builtin_clz(r-l+1);
    return max(mx[l][k],mx[r-(1<<k)+1][k])-min(mn[l][k],mn[r-(1<<k)+1][k]);
}
int get_max_R(int L){
      int l=L,r=n,now;
		while(l<=r){
			int mid=(l+r)/2;
			if(query(L,mid)<=k){
				now=mid;
				l=mid+1;
			}
			else r=mid-1;
		}
	return now;
}
void solve(){
     cin >> n;
	 cin >> k;
     for(int i = 1 ; i <= n ; i++){
        cin >> a[i];
     }
    build(n);
	int ans=0;
    for(int i=1;i<=n;i++){
		int l=i;
		int r=get_max_R(l);
       ans+=(r-l+1);
	}
    cout<<ans;

}
