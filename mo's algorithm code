int a[N],n,m,mp[N],ans[N];
int res=0,block_size;
struct query {
    int l, r, ind;
}q[N];
bool cmp(query a,query b)
{
    if(a.l/block_size != b.l/block_size)
    {
        return a.l/block_size < b.l/block_size;
    }
    return a.r < b.r;
}
void remove(int ind){ 
  mp[a[ind]]--;
  res-=(mp[a[ind]]==0);
}  
void add(int ind){  
  mp[a[ind]]++;
  res+=(mp[a[ind]]==1);
}    
void mos() {
    int l = 0;
    int r = -1;
    for (int i=0;i<m;i++) {
        while (l > q[i].l)add(--l);
        while (r < q[i].r)add(++r);
        while (l < q[i].l)remove(l++);
        while (r > q[i].r)remove(r--);
        ans[q[i].ind] = res;
    }
}
void solve(){
 
    cin>>n>>m;
    block_size=sqrt(n)+1;
    map<int,int>compress;
    int cnt=1;
    for(int i=0;i<n;i++){
        cin>>a[i];
        if(compress.find(a[i])!=compress.end()){
            a[i]=compress[a[i]];
        }
        else{
            compress[a[i]]=cnt;
            a[i]=compress[a[i]];
            cnt++;
        }
    }
    for(int i=0;i<m;i++){
       int l,r;
       cin>> l >> r;
       l--, r--;
       q[i].l=l;
       q[i].r=r;
       q[i].ind=i;
       
    }
    sort(q, q+m,cmp);
    mos();
    for(int i=0;i<m;i++){
        cout<<ans[i]<<nl;
    }
 
}
 
